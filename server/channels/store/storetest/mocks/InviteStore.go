// Code generated by mockery v2.53.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	model "github.com/mattermost/mattermost/server/public/model"
)

// InviteStore is an autogenerated mock type for the InviteStore type
type InviteStore struct {
	mock.Mock
}

// Add provides a mock function with given fields: inviteItem
func (_m *InviteStore) Add(inviteItem *model.InviteItem) error {
	ret := _m.Called(inviteItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.InviteItem) error); ok {
		r0 = rf(inviteItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: inviteId
func (_m *InviteStore) Delete(inviteId string) error {
	ret := _m.Called(inviteId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(inviteId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTeamId provides a mock function with given fields: inviteId
func (_m *InviteStore) GetTeamId(inviteId string) (string, error) {
	ret := _m.Called(inviteId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(inviteId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(inviteId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inviteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInviteStore creates a new instance of InviteStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInviteStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *InviteStore {
	mock := &InviteStore{}
	mock.Mock.Test(t)
	return mock
} 